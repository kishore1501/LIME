!pip install lime

import os

package_name = 'lime'
package_path = os.path.dirname(os.path.realpath(__import__(package_name).__file__))
package_size = os.path.getsize(package_path)//1024

print(f"Size of {package_name}: {package_size} MB")
# Size of the LIME is 4 MB

import lime
import lime.lime_tabular 

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

from sklearn.datasets import load_iris
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

iris = load_iris()
X = iris.data
Y = iris.target

feature_names = iris.feature_names
class_names = iris.target_names
print("Feature names:", feature_names)
print("Class names:", class_names)

# Size of the dataset
dataset_size = X.shape
print("The size of the dataset is:", dataset_size)

# Convert data to a DataFrame
data = pd.DataFrame(X, columns=feature_names)
data['target'] = Y

print(data.head())
print(data.tail())

# Size of the dataset
dataset_size = X.shape
print("The size of the dataset is:", dataset_size)

# Convert data to a DataFrame
data = pd.DataFrame(X, columns=feature_names)
data['target'] = Y

print(data.head())
print(data.tail())

#Splitting the dataset into training and testing data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

#Training the model(RandomForestClassifier)
model = RandomForestClassifier(random_state=42)
model.fit(X_train, Y_train)
explainer = lime.lime_tabular.LimeTabularExplainer(X_train, feature_names=feature_names, class_names=iris.target_names)
print(data.iloc[11])

#Choosing an instance from the test set
instance_idx = 11
instance = X_test[instance_idx]

#Get the predicted probabilites for each class
predicted_class = model.predict([instance])[0]
probabilities = model.predict_proba([instance])[0]

print("\nModel Prediction: ")
print(f"Predicted Class:{iris.target_names[predicted_class]}")
print("Class Probabilities: ")
for class_idx, class_name in enumerate(iris.target_names):
    print(f"{class_name} - {probabilities[class_idx]:.4f}")
    
df = pd.DataFrame(X, columns=feature_names)
df['target']=Y
df.hist(figsize=(10,6))
plt.tight_layout()
plt.show()

# Visualize the pairwise relationship between features using scatter plots
sns.pairplot(df, hue='target')
plt.show()

corr = df.corr()
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title('correlation matrix')
plt.show()

